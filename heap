#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <stdint.h> 
#include <assert.h>

#define HEAP_CAP_WORDS 1024
#define CHUNK_LIST_CAP 128

typedef struct {
    void *start;
    size_t size;
} MemoryChunk;

typedef struct {
    size_t count;
    MemoryChunk chunks[CHUNK_LIST_CAP];
} ChunkList;

uintptr_t heap[HEAP_CAP_WORDS] = {0};
const uintptr_t *stack_base = 0;

bool reachable_chunks[CHUNK_LIST_CAP] = {0};
void *chunks_to_free[CHUNK_LIST_CAP] = {0};
size_t chunks_to_free_count = 0;

ChunkList allocated_chunks = {0};
ChunkList freed_chunks = {
    .count = 1,
    .chunks = {
        [0] = {.start = heap, .size = sizeof(heap)}
    },
};
ChunkList temporary_chunks = {0};

void insert_chunk(ChunkList *list, void *start, size_t size)
{
    assert(list->count < CHUNK_LIST_CAP);
    list->chunks[list->count].start = start;
    list->chunks[list->count].size = size;

    for (size_t i = list->count;
         i > 0 && list->chunks[i].start < list->chunks[i - 1].start;
         --i) {
        MemoryChunk temp = list->chunks[i];
        list->chunks[i] = list->chunks[i - 1];
        list->chunks[i - 1] = temp;
    }

    list->count += 1;
}

void merge_chunks(ChunkList *destination, const ChunkList *source)
{
    destination->count = 0;

    for (size_t i = 0; i < source->count; ++i) {
        MemoryChunk chunk = source->chunks[i];

        if (destination->count > 0) {
            MemoryChunk *top_chunk = &destination->chunks[destination->count - 1];

            if (top_chunk->start + top_chunk->size == chunk.start) {
                top_chunk->size += chunk.size;
            } else {
                insert_chunk(destination, chunk.start, chunk.size);
            }
        } else {
            insert_chunk(destination, chunk.start, chunk.size);
        }
    }
}

void dump_chunks(const ChunkList *list, const char *name)
{
    printf("%s Chunks (%zu):\n", name, list->count);
    for (size_t i = 0; i < list->count; ++i) {
        printf("  Start: %p, Size: %zu\n",
               (void *)list->chunks[i].start,
               list->chunks[i].size);
    }
}

int find_chunk(const ChunkList *list, uintptr_t *ptr)
{
    for (size_t i = 0; i < list->count; ++i) {
        if (list->chunks[i].start == ptr) {
            return (int)i;
        }
    }

    return -1;
}

void remove_chunk(ChunkList *list, size_t index)
{
    assert(index < list->count);
    for (size_t i = index; i < list->count - 1; ++i) {
        list->chunks[i] = list->chunks[i + 1];
    }
    list->count -= 1;
}

void *allocate_memory(size_t size_bytes)
{
    const size_t size_words = (size_bytes + sizeof(uintptr_t) - 1) / sizeof(uintptr_t);

    if (size_words > 0) {
        merge_chunks(&temporary_chunks, &freed_chunks);
        freed_chunks = temporary_chunks;

        for (size_t i = 0; i < freed_chunks.count; ++i) {
            MemoryChunk chunk = freed_chunks.chunks[i];
            if (chunk.size >= size_words) {
                remove_chunk(&freed_chunks, i);

                const size_t tail_size_words = chunk.size - size_words;
                insert_chunk(&allocated_chunks, chunk.start, size_words);

                if (tail_size_words > 0) {
                    insert_chunk(&freed_chunks, chunk.start + size_words, tail_size_words);
                }

                return chunk.start;
            }
        }
    }

    return NULL;
}

void free_memory(void *ptr)
{
    if (ptr != NULL) {
        const int index = find_chunk(&allocated_chunks, ptr);
        assert(index >= 0);
        assert(ptr == allocated_chunks.chunks[index].start);
        insert_chunk(&freed_chunks,
                     allocated_chunks.chunks[index].start,
                     allocated_chunks.chunks[index].size);
        remove_chunk(&allocated_chunks, (size_t)index);
    }
}

static void mark_reachable_region(const uintptr_t *start, const uintptr_t *end)
{
    for (; start < end; start += 1) {
        const uintptr_t *p = (const uintptr_t *)(uintptr_t)*start; // Cast p to uintptr_t
        for (size_t i = 0; i < allocated_chunks.count; ++i) {
            MemoryChunk chunk = allocated_chunks.chunks[i];
            if (chunk.start <= (void *)p && (void *)p < chunk.start + chunk.size) { // Cast chunk.start to void*
                if (!reachable_chunks[i]) {
                    reachable_chunks[i] = true;
                    mark_reachable_region(chunk.start, chunk.start + chunk.size);
                }
            }
        }
    }
}


void garbage_collect()
{
    const uintptr_t *stack_start = (const uintptr_t *)__builtin_frame_address(0);
    memset(reachable_chunks, 0, sizeof(reachable_chunks));
    mark_reachable_region(stack_start, stack_base + 1);

    chunks_to_free_count = 0;
    for (size_t i = 0; i < allocated_chunks.count; ++i) {
        if (!reachable_chunks[i]) {
            assert(chunks_to_free_count < CHUNK_LIST_CAP);
            chunks_to_free[chunks_to_free_count++] = allocated_chunks.chunks[i].start;
        }
    }

    for (size_t i = 0; i < chunks_to_free_count; ++i) {
        free_memory(chunks_to_free[i]);
    }
}

int main() {
    printf("Initially:\n");
    dump_chunks(&allocated_chunks, "Allocated");
    dump_chunks(&freed_chunks, "Free");

    // Allocate some memory
    int *ptr1 = allocate_memory(5 * sizeof(int));
    if (ptr1 != NULL) {
        printf("Memory allocated successfully.\n");
    } else {
        printf("Failed to allocate memory.\n");
        return 1;
    }

    printf("\nAfter first allocation:\n");
    dump_chunks(&allocated_chunks, "Allocated");
    dump_chunks(&freed_chunks, "Free");

    // Free some memory
    free_memory(ptr1);
    printf("Memory freed.\n");

    printf("\nAfter freeing memory:\n");
    dump_chunks(&allocated_chunks, "Allocated");
    dump_chunks(&freed_chunks, "Free");

    // Allocate more memory
    int *ptr2 = allocate_memory(10 * sizeof(int));
    if (ptr2 != NULL) {
        printf("Memory allocated successfully.\n");
    } else {
        printf("Failed to allocate memory.\n");
        return 1;
    }

    printf("\nAfter second allocation:\n");
    dump_chunks(&allocated_chunks, "Allocated");
    dump_chunks(&freed_chunks, "Free");

    // Perform garbage collection
    printf("\nPerforming garbage collection...\n");
    garbage_collect();
    printf("Garbage collection done.\n");

    printf("\nAfter garbage collection:\n");
    dump_chunks(&allocated_chunks, "Allocated");
    dump_chunks(&freed_chunks, "Free");

    return 0;
}
